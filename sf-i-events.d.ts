/**
 * @license
 * Copyright 2022 Superflow.dev
 * SPDX-License-Identifier: MIT
 */
import { LitElement, PropertyValueMap } from 'lit';
/**
 * SfIEvents element.
 * @fires renderComplete - When the list is populated
 * @fires valueChanged - When the value is changed
 * @property apiId - backend api id
 * @property label - input label
 * @property name - name of the input
 * @property mode - mode of operation
 * @property selectedId - id to preselect
 * @property selectedValue - callback function
 */
export declare class SfIEvents extends LitElement {
    SEARCH_BLOCK_SIZE: number;
    FLOW_GRAPH_COMPLETENESS: string;
    FLOW_GRAPH_TIMELINESS: string;
    FLOW_GRAPH_RISKAREAS: string;
    FLOW_GRAPH_RISKSEVERITY: string;
    FLOW_GRAPH_LOCATION: string;
    FLOW_GRAPH_FUNCTION: string;
    FLOW_GRAPH_OBLIGATIONTYPE: string;
    FLOW_GRAPH_JURISDICTION: string;
    FLOW_GRAPH_FREQUENCY: string;
    TAB_YEAR: string;
    TAB_STREAM: string;
    TAB_UPCOMING: string;
    TAB_THIS: string;
    TAB_PAST: string;
    TAB_CUSTOM: string;
    TAB_ADHOC: string;
    TAB_REPORTER: string;
    TAB_APPROVER: string;
    TAB_FUNCTION_HEAD: string;
    TAB_AUDITOR: string;
    TAB_VIEWER: string;
    TAB_STATUTES: string;
    TAB_COMPLIANCES: string;
    TAB_ENTITIES: string;
    TAB_LOCATIONS: string;
    TAB_TAGS: string;
    TAB_REPORTERS: string;
    TAB_APPROVERS: string;
    TAB_FUNCTION_HEADS: string;
    TAB_MAKER_CHECKERS: string;
    TAB_AUDITORS: string;
    TAB_DOCS: string;
    TAB_VIEWERS: string;
    TAB_DUEDATES: string;
    TAB_ALERTSCHEDULES: string;
    TAB_INTERNALCONTROLS: string;
    TAB_FUNCTIONS: string;
    TAB_COUNTRIES: string;
    TAB_CALENDAR: string;
    COLOR_APPROVED: string;
    COLOR_NOT_STARTED: string;
    COLOR_IN_PROGRESS: string;
    COLOR_PAST_DUE_DATE: string;
    COLOR_LATE_EXECUTED: string;
    COLOR_LATE_APPROVED: string;
    CERTIFICATE_HTML: string;
    COMPLIANCES_HTML: string;
    selectedCbs: Array<any>;
    projectId: string;
    name: string;
    apiId: string;
    apiIdStatutes: string;
    apiIdCompliances: string;
    apiIdList: string;
    apiIdDetail: string;
    apiIdUsers: string;
    apiIdTags: string;
    apiMethodList: string;
    apiMethodDetail: string;
    apiBodyList: string;
    apiBodyDetail: string;
    userProfileId: string;
    graphParam: string;
    entityId: string;
    locationId: string;
    countryId: string;
    functionId: string;
    tagId: string;
    userName: string;
    projectName: string;
    apiResponseFieldList: string;
    myOnboardingTab: string;
    myRole: string;
    chart: any;
    chart2: any;
    chart3: any;
    calendarStartDD: string;
    calendarStartMM: string;
    calendarStartYYYY: string;
    calendar: Date[];
    mappedValuesDueDates: any;
    mappedValuesUsers: any;
    mappedValuesTags: any;
    unmappedEvents: any;
    mappings: any;
    triggers: any;
    monthNames: string[];
    events: any;
    eventsInWindow: any;
    eventHideFields: any;
    getEventHideFields: () => any;
    eventPreviewFields: any;
    getEventPreviewFields: () => any;
    eventFields: any;
    getEventFields: () => any;
    eventFieldDependencies: any;
    getEventFieldDependencies: () => any;
    getApiBodyList: () => any;
    getApiBodyDetail: () => any;
    csvDataCompliances: string;
    csvDataStats: string;
    htmlDataCompliances: string;
    htmlDataStats: string;
    period: string;
    mode: string;
    flowGraph: string;
    flow: string;
    fill: string;
    filterTags: string[];
    riskAreasData: any;
    riskAreasPartStatusData: any;
    riskAreasLateStatusData: any;
    riskSeverityData: any;
    riskSeverityPartStatusData: any;
    riskSeverityLateStatusData: any;
    functionData: any;
    functionPartStatusData: any;
    functionLateStatusData: any;
    obligationTypeData: any;
    obligationTypePartStatusData: any;
    obligationTypeLateStatusData: any;
    jurisdictionData: any;
    jurisdictionPartStatusData: any;
    jurisdictionLateStatusData: any;
    currentColumnIndex: string;
    frequencyData: any;
    frequencyPartStatusData: any;
    frequencyLateStatusData: any;
    locationData: any;
    locationPartStatusData: any;
    locationLateStatusData: any;
    selectedItems: Array<string>;
    selectedStatus: string;
    stream: string;
    static styles: import("lit").CSSResult;
    _SfIEventsC: any;
    _SfRowError: any;
    _SfRowErrorMessage: any;
    _SfRowSuccess: any;
    _SfRowSuccessMessage: any;
    _SfLoader: any;
    _SfCalendarContainer: any;
    _SfButtonGenerate: any;
    _SfButtonSearch: any;
    _SfButtonSave: any;
    _SfButtonNext: any;
    _SfButtonPrev: any;
    _SfInputSearch: any;
    _SfButtonSyncChosenProject: any;
    _SfButtonMapChosenProject: any;
    _SfButtonBackChosenProject: any;
    _SfButtonBackCalendarMapping: any;
    _SfButtonBackSyncMapping: any;
    _SfButtonBackChosenMapping: any;
    _SfTitleChosenProject: any;
    _SfTitleChosenMapping: any;
    _SfContainerChosenProject: any;
    _SfContainerProjectSelect: any;
    _SfContainerProjectActions: any;
    _SfStreamContainer: any;
    _SfUpcomingContainer: any;
    _SfDetailContainer: any;
    _SfThisContainer: any;
    _SfPastContainer: any;
    _SfCustomContainer: any;
    _SfAdhocContainer: any;
    _SfMappingContainer: any;
    _SfStreamEventStatus: any;
    _SfTabContainer: any;
    _SfMappingTabContainer: any;
    _SfRoleTabContainer: any;
    _SfOnboardingTabContainer: any;
    _SfOnboardingStatutesListContainer: any;
    _SfOnboardingStatutesContainer: any;
    _SfOnboardingCompliancesListContainer: any;
    _SfOnboardingCompliancesContainer: any;
    _SfOnboardingEntitiesListContainer: any;
    _SfOnboardingEntitiesContainer: any;
    _SfOnboardingFunctionsContainer: any;
    _SfOnboardingFunctionsListContainer: any;
    _SfOnboardingCountriesContainer: any;
    _SfOnboardingCountriesListContainer: any;
    _SfOnboardingLocationsListContainer: any;
    _SfOnboardingLocationsContainer: any;
    _SfOnboardingTagsListContainer: any;
    _SfOnboardingTagsContainer: any;
    _SfOnboardingReportersListContainer: any;
    _SfOnboardingReportersContainer: any;
    _SfOnboardingApproversContainer: any;
    _SfOnboardingFunctionHeadsContainer: any;
    _SfOnboardingMakerCheckersContainer: any;
    _SfOnboardingDocsContainer: any;
    _SfOnboardingAuditorsContainer: any;
    _SfOnboardingViewersContainer: any;
    _SfOnboardingApproversListContainer: any;
    _SfOnboardingMakerCheckersListContainer: any;
    _SfOnboardingDocsListContainer: any;
    _SfOnboardingFunctionHeadsListContainer: any;
    _SfOnboardingAuditorsListContainer: any;
    _SfOnboardingViewersListContainer: any;
    _SfOnboardingDuedatesListContainer: any;
    _SfOnboardingDuedatesContainer: any;
    _SfOnboardingAlertSchedulesListContainer: any;
    _SfOnboardingAlertSchedulesContainer: any;
    _SfOnboardingInternalControlsListContainer: any;
    _SfOnboardingInternalControlsContainer: any;
    _SfOnboardingCalendarListContainer: any;
    _SfOnboardingCalendarContainer: any;
    _SfProject: any;
    _SfUploader: any;
    getEventField: (field: string) => any;
    getParentFieldFromDepedencies: (field: string) => any;
    getEventTexts: (field: string, selectedId: Array<string>, row: any) => string;
    enableCalendar: () => void;
    enableStream: () => void;
    enableUpcoming(): void;
    enableThis(): void;
    enablePast(): void;
    enableCustom(): void;
    enableAdhoc(): void;
    prepareXhr: (data: any, url: string, loaderElement: any, authorization: any, loaderText?: string) => Promise<unknown>;
    clearMessages: () => void;
    setError: (msg: string) => void;
    setSuccess: (msg: string) => void;
    getLastDayOfLastMonth: (month: number, year: number) => number;
    getLastDayOfMonth: (month: number, year: number) => number;
    getFirstDateOfLastWeek: (startDate: Date) => Date;
    getFirstDayOfLastMonth(yourDate: Date): Date;
    getFirstDateOfWeek: (startDate: Date) => Date;
    getBlanks: (month: number, year: number) => number;
    getMonthStatus: (month: number, year: number) => {
        percNotStarted: number;
        percInProgress: number;
        percApproved: number;
    };
    insertDates: (month: number, year: number) => string;
    insertDayNames: () => string;
    getPastDueDate: (mmdd: string) => boolean;
    getLateExecuted: (mmdd: string, event: any) => boolean;
    getLateApproved: (mmdd: string, event: any) => boolean;
    updateJurisdictionStats: (jurisdictions: Array<string>, partStatus: string, lateStatus: string) => void;
    updateFrequencyStats: (frequencies: Array<string>, partStatus: string, lateStatus: string) => void;
    updateLocationStats: (locations: Array<string>, partStatus: string, lateStatus: string) => void;
    updateFunctionStats: (functions: Array<string>, partStatus: string, lateStatus: string) => void;
    updateRiskAreaStats: (riskAreas: Array<string>, partStatus: string, lateStatus: string) => void;
    updateRiskSeverityStats: (riskSeverities: Array<string>, partStatus: string, lateStatus: string) => void;
    updateObligationTypeStats: (obligationTypes: Array<string>, partStatus: string, lateStatus: string) => void;
    renderStreamEvents: (index: number, month: number, year: number) => string;
    renderUpcomingEvents: (index: number, startDate: Date, count: number) => string;
    renderThisEvents: (index: number, startDate: Date) => string;
    renderPastEvents: (index: number, startDate: Date) => string;
    renderRangeEvents: (firstDate: Date, count: number) => void;
    checkStartDateEarliness: (value: string) => boolean;
    checkEndDateLateness: (value: string) => boolean;
    processDateSelection: () => Promise<void>;
    initCustomRightCol: () => void;
    checkAndShowBulk: () => boolean;
    calculateAndShowSummary: () => void;
    showAllEvents: () => void;
    showMappedEvents: () => void;
    showUnmappedEvents: () => void;
    updateInAllSelections: (param: string, value: any) => void;
    updateMappingStatus: (value: any, clickIndex: number) => void;
    filterEventsInWindow: (tags: Array<string>, ctx: any, divContainer: HTMLDivElement | null) => void;
    sleep: (ms: number) => Promise<unknown>;
    hideTabContainers: () => Promise<void>;
    loadOnboardingStatutes: () => Promise<void>;
    loadOnboardingCompliances: () => Promise<void>;
    loadOnboardingCountries: () => Promise<void>;
    loadOnboardingEntities: () => Promise<void>;
    loadOnboardingLocations: () => Promise<void>;
    loadOnboardingFunctions: () => Promise<void>;
    loadOnboardingTags: () => Promise<void>;
    loadOnboardingReporters: () => Promise<void>;
    loadOnboardingApprovers: () => Promise<void>;
    loadOnboardingFunctionHeads: () => Promise<void>;
    loadOnboardingViewers: () => Promise<void>;
    loadOnboardingDocs: () => Promise<void>;
    loadOnboardingMakerCheckers: () => Promise<void>;
    loadOnboardingAuditors: () => Promise<void>;
    loadOnboardingDuedates: () => Promise<void>;
    loadOnboardingAlertSchedules: () => Promise<void>;
    loadOnboardingInternalControls: () => Promise<void>;
    loadOnboardingCalendar: () => Promise<void>;
    calculateStartAndEndDateOfPast: (index?: number) => {
        startDate: string;
        endDate: string;
    };
    calculateStartAndEndDateOfThis: (index?: number) => {
        startDate: string;
        endDate: string;
    };
    calculateStartAndEndDateOfUpcoming: (index?: number) => {
        startDate: string;
        endDate: string;
    };
    calculateStartAndEndDateOfStream: (index?: number) => {
        startDate: string;
        endDate: string;
    } | null;
    renderAdhoc: (events?: Array<any> | null, triggers?: Array<any> | null) => void;
    renderCustom: () => void;
    renderPast: (index?: number) => void;
    renderUpcoming: (index?: number) => void;
    renderThis: (index?: number) => void;
    renderStream: (index?: number) => void;
    clearButtonSelection: () => void;
    clearGraphData: () => void;
    clearGraph: (divContainer: HTMLDivElement, index: number) => void;
    renderCompletenessGraph: (divContainer: HTMLDivElement) => void;
    renderTimelinessGraph: (divContainer: HTMLDivElement) => void;
    renderRiskSeverityGraph: (divContainer: HTMLDivElement) => void;
    renderObligationTypeGraph: (divContainer: HTMLDivElement) => void;
    renderFunctionGraph: (divContainer: HTMLDivElement) => void;
    renderLocationGraph: (divContainer: HTMLDivElement) => void;
    renderJurisdictionGraph: (divContainer: HTMLDivElement) => void;
    renderFrequencyGraph: (divContainer: HTMLDivElement) => void;
    renderRiskGraph: (divContainer: HTMLDivElement) => void;
    renderEventDetail: (event: any, mmddyyyy: any, currentColumnButton: HTMLButtonElement | null) => void;
    renderCalendar: () => void;
    renderTaggingTable: (divElement: any, sourceArray: any, taggingArray: any, sourceCols: any, uploadFunction: any, refreshFunction: any, colName: any, uniqCols: Array<any>, apiIdDropdown: string, dropdownSearchPhrase: any, mandatoryFields: any, jobs: any, anotherProjection: any) => void;
    renderMappingTable: (divElement: any, jsonData: Array<any>, cursor: Array<any>, fetchFunction: any, searchString: string, mappedArray: any, found: number, uploadFunction: any, refreshFunction: any) => void;
    refreshCalendar: () => Promise<void>;
    renderOnboardingCalendar: (calendarJobs: any) => void;
    renderOnboardingInternalControls: (mappedInternalControls: any, mappedSerializedAlertSchedules: any, internalcontrolsJobs: any) => void;
    renderOnboardingAlertSchedules: (mappedAlertSchedules: any, mappedSerializedDuedates: any, alertschedulesJobs: any) => void;
    renderOnboardingDuedates: (mappedDuedates: any, mappedSerializedMakerCheckers: any, duedatesJobs: any) => void;
    renderOnboardingReporters: (mappedReporters: any, mappedSerializedTags: any, reportersJobs: any) => void;
    renderOnboardingApprovers: (mappedApprovers: any, mappedSerializedReporters: any, approversJobs: any) => void;
    renderOnboardingFunctionHeads: (mappedFunctionHeads: any, mappedSerializedApprovers: any, functionHeadsJobs: any) => void;
    renderOnboardingMakerCheckers: (mappedMakerCheckers: any, mappedSerializedDocs: any, makerCheckerJobs: any) => void;
    renderOnboardingDocs: (mappedDocs: any, mappedSerializedViewers: any, docsJobs: any) => void;
    renderOnboardingAuditors: (mappedAuditors: any, mappedSerializedFunctionheads: any, auditorsJobs: any) => void;
    renderOnboardingViewers: (mappedViewers: any, mappedSerializedAuditors: any, viewersJobs: any) => void;
    renderOnboardingTags: (mappedTags: any, mappedSerializedFunctions: any, tagsJobs: any) => void;
    renderOnboardingFunctions: (mappedFunctions: any, mappedSerializedLocations: any, functionsJobs: any) => void;
    renderOnboardingLocations: (mappedLocations: any, mappedSerializedEntities: any, locationsJobs: any) => void;
    renderOnboardingCompliances: (mappedStatutes: any, mappedCompliances: any) => void;
    renderOnboardingEntities: (mappedEntities: any, mappedSerializedCountries: any, entitiesJobs: any) => void;
    renderOnboardingCountries: (mappedCountries: any, mappedCompliances: any, countriesJobs: any) => void;
    renderOnboardingStatutes: (mappedStatutes: any) => void;
    clickOnboardingTabs: () => void;
    renderOnboardingTabs: () => void;
    proceedToCalendar: () => Promise<void>;
    renderRoleTabs: () => void;
    csvmaker: (data: any) => string;
    renderChartSettingsFilters: (container: HTMLDivElement, ctx: any) => void;
    renderChartSettingsSettings: (container: HTMLDivElement) => void;
    renderChartSettings: (container: HTMLDivElement, selectedTab: number | undefined, ctx: any) => void;
    formatLabel: (str: string, maxwidth: number) => any;
    renderChart3: (ctx: any, type: any, data: any, title: string) => void;
    renderChart2: (ctx: any, type: any, data: any, title: string) => void;
    renderChart: (ctx: any, type: any, data: any, title: string) => void;
    clickOnPie: (event: any, array: any, data: any) => void;
    getCurrentTab: () => string;
    renderTabs: (selectedTab: string) => void;
    renderMappingTabs: (selectedTab: string) => void;
    renderExpandEvent: (events: any, index: any) => void;
    renderMapping: (unmappedEvents: any) => void;
    applyFilter: (filter?: string) => void;
    getIndexFromId: (id: string) => number;
    prepopulateMapping: (mappings: any) => void;
    clearAllMappingSelections: () => void;
    clearAllCalendars: () => void;
    transformMappingsForUpload: (mapping: any) => {
        duedates: any;
        tags: any;
        users: any;
    };
    uploadInternalControlsMapping: (data: any) => Promise<void>;
    uploadAlertSchedulesMapping: (data: any) => Promise<void>;
    uploadDuedatesMapping: (data: any) => Promise<void>;
    uploadApproversMapping: (data: any) => Promise<void>;
    uploadFunctionHeadsMapping: (data: any) => Promise<void>;
    uploadMakerCheckersMapping: (data: any) => Promise<void>;
    uploadDocsMapping: (data: any) => Promise<void>;
    uploadAuditorsMapping: (data: any) => Promise<void>;
    uploadViewersMapping: (data: any) => Promise<void>;
    uploadReportersMapping: (data: any) => Promise<void>;
    uploadTagsMapping: (data: any) => Promise<void>;
    uploadFunctionsMapping: (data: any) => Promise<void>;
    uploadLocationsMapping: (data: any) => Promise<void>;
    uploadEntitiesMapping: (data: any) => Promise<void>;
    uploadCountriesMapping: (data: any) => Promise<void>;
    uploadCompliancesMapping: (data: any) => Promise<void>;
    uploadStatutesMapping: (data: any) => Promise<void>;
    uploadUnTriggerEvent: (eventid: string, mmdd: string) => Promise<void>;
    uploadTriggerEvent: (entityId: string, locationId: string, eventid: string, dateofoccurrence: string) => Promise<void>;
    uploadAudit: (entityId: string, locationId: string, mmddyyyy: string, eventid: string, comments: string, approved: any) => Promise<void>;
    uploadReview: (entityId: string, locationId: string, mmddyyyy: string, eventid: string, comments: string, approved: any) => Promise<void>;
    uploadReport: (entityId: string, locationId: string, mmddyyyy: string, eventid: string, comments: string, doc: string, docs: any) => Promise<void>;
    uploadMapping: () => Promise<void>;
    uploadEvents: () => Promise<void>;
    uploadReprogramTrigger: (eventid: string, timestamp: string) => Promise<void>;
    processEvent: (value: any) => void;
    renderChosenProject: (events?: any) => void;
    fetchSearchStatutes: (searchString: string, cursor?: string) => Promise<any>;
    fetchSearchCompliances: (searchString: string, cursor?: string) => Promise<any>;
    fetchMappedLocations: () => Promise<any>;
    fetchMappedFunctions: () => Promise<any>;
    fetchMappedCompliances: () => Promise<any>;
    fetchMappedSerializedAlertSchedules: () => Promise<any>;
    fetchMappedSerializedDuedates: () => Promise<any>;
    fetchMappedSerializedApprovers: () => Promise<any>;
    fetchMappedSerializedFunctionheads: () => Promise<any>;
    fetchMappedSerializedMakerCheckers: () => Promise<any>;
    fetchMappedSerializedDocs: () => Promise<any>;
    fetchMappedSerializedAuditors: () => Promise<any>;
    fetchMappedSerializedViewers: () => Promise<any>;
    fetchMappedSerializedReporters: () => Promise<any>;
    fetchMappedSerializedTags: () => Promise<any>;
    fetchMappedSerializedLocations: () => Promise<any>;
    fetchMappedSerializedFunctions: () => Promise<any>;
    fetchMappedSerializedEntities: () => Promise<any>;
    fetchMappedSerializedCountries: () => Promise<any>;
    fetchMappedInternalControls: () => Promise<any>;
    fetchMappedAlertSchedules: () => Promise<any>;
    fetchMappedDuedates: () => Promise<any>;
    fetchMappedReporters: () => Promise<any>;
    fetchMappedApprovers: () => Promise<any>;
    fetchMappedFunctionHeads: () => Promise<any>;
    fetchMappedMakerCheckers: () => Promise<any>;
    fetchMappedDocs: () => Promise<any>;
    fetchMappedAuditors: () => Promise<any>;
    fetchMappedViewers: () => Promise<any>;
    fetchMappedTags: () => Promise<any>;
    fetchMappedCountries: () => Promise<any>;
    fetchMappedEntities: () => Promise<any>;
    fetchMappedStatutes: () => Promise<any>;
    fetchInternalControlsJobs: () => Promise<any>;
    fetchAlertSchedulesJobs: () => Promise<any>;
    fetchDueDatesJobs: () => Promise<any>;
    fetchApproversJobs: () => Promise<any>;
    fetchFunctionHeadsJobs: () => Promise<any>;
    fetchMakerCheckersJobs: () => Promise<any>;
    fetchDocsJobs: () => Promise<any>;
    fetchAuditorsJobs: () => Promise<any>;
    fetchViewersJobs: () => Promise<any>;
    fetchReportersJobs: () => Promise<any>;
    fetchTagsJobs: () => Promise<any>;
    fetchLocationsJobs: () => Promise<any>;
    fetchCountriesJobs: () => Promise<any>;
    fetchEntitiesJobs: () => Promise<any>;
    fetchFunctionJobs: () => Promise<any>;
    fetchCalendarJobs: () => Promise<any>;
    fetchDetail: (value: any) => Promise<void>;
    fetchGetMappedCalendar: () => Promise<void>;
    fetchUserCalendar_2: (startDate?: string, endDate?: string) => Promise<void>;
    fetchUserCalendar: () => Promise<void>;
    fetchCalendar: () => Promise<void>;
    fetchReprogramAdhoc: () => Promise<void>;
    fetchAdhoc: (reprogramTriggers?: boolean, startDate?: string, endDate?: string) => Promise<void>;
    fetchEventMap: () => Promise<void>;
    fetchList: () => Promise<void>;
    initCalendar: () => Promise<void>;
    initInputs: () => void;
    showChooseProject: () => void;
    showChosenProject: () => void;
    showChosenMapping: () => void;
    truncate: (str: string, n: number, useWordBoundary: boolean, ellipsis?: boolean) => string;
    initListenersAdmin: () => void;
    loadMode: () => Promise<void>;
    constructor();
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    connectedCallback(): void;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'sf-i-events': SfIEvents;
    }
}
//# sourceMappingURL=sf-i-events.d.ts.map